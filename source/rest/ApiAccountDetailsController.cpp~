#include "ApiAccountDetailsController.hpp"

#include <proxygen/httpserver/RequestHandler.h>
#include <proxygen/httpserver/ResponseBuilder.h>

#include "../database/Database.hpp"
#include "../utility/Utility.hpp"
#include "../codec/Codec.hpp"
#include "Validation.hpp"

rest::ApiAccountDetailsController::ApiAccountDetailsController(std::string accountId) {
  if (rest::Validation::validateId(accountId)) {
    this->accountId = accountId;
  }
}

void rest::ApiAccountDetailsController::onRequest
(std::unique_ptr<proxygen::HTTPMessage> req) noexcept {
  proxygen::ResponseBuilder builder(downstream_);
  
  if (this->accountId == "") {
    this->alreadySent = true;
    builder
      .status(400, "Bad Request")
      .send();
    return;
  } else if (req->getMethod() == proxygen::HTTPMethod::GET) {
    Json::Value* metadata = NULL;
    try {
      metadata = database::Database::getAccountMetadata(this->accountId);
    } catch(...) {
      this->alreadySent = true;
      builder
	.status(404, "Not Found")
	.send();
      return;
    }

    Json::Value* transactions = NULL;
    try {
      transactions = database::Database::getTransactions(this->accountId);
    } catch(...) {
      this->alreadySent = true;
      builder
	.status(500, "Internal Server Error")
	.send();
      return;
    }

    Json::Value object = Json::objectValue;
    object["name"] = metadata->operator[]("name");
    object["surname"] = metadata->operator[]("surname");
    object["transactions"] = *transactions;

    std::string result = utility::jsonToString(object);
    std::string headerValue = object["name"].asString() + ";" + object["surname"].asString();
    delete metadata; delete transactions;
    builder
      .status(200, "OK")
      .header("X-Sistema-Bancario", headerValue)
      .body(result)
      .send();
  } else if (req->getMethod() == proxygen::HTTPMethod::HEAD) {
    Json::Value* metadata = NULL;
    try {
      metadata = database::Database::getAccountMetadata(this->accountId);
    } catch(...) {
      this->alreadySent = true;
      builder
	.status(404, "Not Found")
	.send();
      return;
    }

    std::string headerValue = metadata->operator[]("name").asString() +
      ";" + metadata->operator[]("surname").asString();
    delete metadata;

    builder
      .status(200, "OK")
      .header("X-Sistema-Bancario", headerValue)
      .send();
  } else if (req->getMethod() == proxygen::HTTPMethod::PUT) {
    // placeholder
  } else if (req->getMethod() == proxygen::HTTPMethod::PATCH) {
    // placeholder
  } else if (req->getMethod() == proxygen::HTTPMethod::POST) {
    // placeholder
  } else {
    this->alreadySent = true;
    builder
      .status(501, "Not implemented")
      .send();
    return;
  }
}

void rest::ApiAccountDetailsController::onEOM() noexcept {
  proxygen::ResponseBuilder builder(downstream_);
  if (
      !(this->body_) ||
      (this->body_->size() == 0)) {
    if (!(this->alreadySent))
      builder.status(400, "Bad Request");
    builder.sendWithEOM();
    return;
  }

 Json::Value parameters;
  Json::Reader* text_reader = new Json::Reader();
  if (!(text_reader->parse(*(this->body_), parameters))) {
    builder
      .status(400, "Bad Request")
      .sendWithEOM();
    return;
  }

  delete text_reader;

  if (
      (!(parameters.isObject())) ||
      (! parameters.isMember("amount")) ||
      (! parameters["amount"].isInt())
      ) {
    builder
      .status(400, "Bad Request")
      .sendWithEOM();
    return;
  }

  try {
    int amount = parameters["amount"].asInt();
    std::string timestamp = "15-06-2022 10:10:00";

    std::string transactionId = codec::computeUUID();
    if (amount > 0)
        database::Database::insertPayment(transactionId, this->accountId, amount, timestamp);
    else
        database::Database::insertWithdraw(transactionId, this->accountId, -amount, timestamp);

    builder
      .status(201, "Created")
      .body(transactionId)
      .sendWithEOM();
    return;
  } catch(...) {
    builder
      .status(409, "Conflict")
      .sendWithEOM();
    return;
  }
}
